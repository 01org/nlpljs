Content Push
============

Content-Push (CP) is a design concept for the web. The basic idea is to use the
content on the current tab and aggreate content from other parts of the net,
truested sources, related to the current context. The PoC is being developed with
Google Docs. The document text is parsed and analysed to extract the keywords, a
search is made using these keywords and the results are displayed in a panel.

CP is implemented as a chrome extension(page action) and can be downloaded
from github: https://github.com/otcshare/ContentPush.
CP uses google polymer framework for implementation. All the dependencies can be
installed by running a 'bower install' command in the root directory.
Add the app/ dir as a unpacked extentsion.

This document is inteded for anyone who wishes to contribute to the project, it
dicusses the implementation details and design on the app to get you up and running.
This document is work in progress.

CP relies heavily on Google Polymer. Everything is split into custom components.
When CP is launched, the event page record the tab URL. It throws away the current
DOM tree. It reloaded the tab URL in a components {<cp-document>}.
It also loads a separate components called <cp-finder> which is responsible for
aggregating data about the contents of the URL. The <core-splitter> is used to
keep a fluid boundry between <cp-document> and <cp-finder>.
app/script/rehostPage.js is the content script which injects these components in
the current tab. app/script/event_page.js is the background-page.

	    |----> <cp-document>
	    |
tab URL ----|-<core-splitter>
	    |
	    |----> <cp-finder>

<cp-doument> component
======================
<cp-document> loads the tab URL contents. The reason for re-loading the URL in a
separate component is to keep its content processing separate from the rest of the
extension. The other advantage of a separate component is the element can be tailored
to the type of content served by the URL (e.g google doc vs Netflix).
<cp-document> is made up of various modules. An internal 'state; is maintained to
keep all the elements in sync.

Methods:<tbd>
Signals:
1. cp-status:	Emits the curent status of the component.
   		The status values are still <tbd>.
2. cp-keywords: Emits the keywords in the current viewport.

<cp-document>
      |
      |--> iframe
      |
      |--> NLP
      |
      |--> <cp-highlighter>
      |
      |--> <cp-scrollwatcher>

The iframe loads the tab url.
The NLP module processes the text from the displayed content and to extract the
'keywords' from it.

<cp-highlighter>
================
This is a custom element, which is responsible to highlight specific contents in the iframe.

Methods:<tbd>
signals:<tbd>

<cp-scrollwatcher>
==================
This is a custom element which watches the window scroll events. Once the scroll stops,
<cp-scrollwatcher> computes the visible content in the iframe.

Methods:<tbd>
signals:<tbd>


<cp-finder>
===========
<cp-finder> is a custom element which is responsible for searching content for
the keywords from <cp-document>, result layouts and sources selection UI.

Methods:<tbd>
signals:<tbd>

<cp-finder> is a collection of the following components.

<cp-finder>
     |
     |--<cp-groups>
     |
     |--<cp-sources>
     |
     |--<cp-panel>
     |      |
     |      |--<cp-tabs>
     |      |
     |      |--<cp-display>
     |             |
     |             |--<cp-layout>
     |             |      |
     |             |      |--<cp-tile*>
     |             |
     |             |--<cp-scroll>
     |
     |--<cp-aggregator>
     |
     |--<cp-fetcher>
     |
     |--<cp-detail>

<cp-tabs>
=========
This is a custom element for displaying the the source groups.
Refer UX Doc page 38.

Methods:<tbd>
signals:<tbd>

<cp-groups>
===========
This is the custom element for selecting the source groups.
Refer UX Doc page 38.

Methods:<tbd>
signals:<tbd>

<cp-sources>
============
This is a custom element for selecting the sources in a group.
Refer UX Doc page 38.

Methods:<tbd>
signals:<tbd>

<cp-panel>
============
This is a custome element which encapuslates <cp-tabs> and <cp-display>.
This element is replaced by <cp-sources> or <cp-group> which configuring
the groups/sources.

Methods:<tbd>
signals:<tbd>

<cp-display>
============
This is a custom element to display the results from search.

Methods:<tbd>
signals:<tbd>

<cp-layout>
===========
This is a custom element which implements the gallery layout.

Methods:<tbd>
signals:<tbd>

<cp-tile*>
==========
This is a base element which represents a given search result.
Depending on the result type, a new element can be extended -
<cp-tile-image>, <cp-tile-quote>,  <cp-tile-doc> etc.

Methods:<tbd>
signals:<tbd>

<cp-scroll>
===========
This is a custom element which takes care of the scrolling (and adding more
elements) in the layout element.

Methods:<tbd>
signals:<tbd>

<cp-aggregator>
===============
This is a custom element which aggregates all the results from the sources
web-workers.

Methods:<tbd>
signals:<tbd>

<cp-fetcher>
============
This is a custom element which spawns a web-worker per sources per keyword.

Methods:<tbd>
signals:<tbd>

<cp-detail>
============
This is a custom element which displays the details about a <cp-tile>

Methods:<tbd>
signals:<tbd>
